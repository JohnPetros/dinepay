/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DinePay {
  export type ReceiptStruct = {
    bill: BigNumberish;
    tipPercentage: BigNumberish;
    numberOfPeople: BigNumberish;
    customerAccount: AddressLike;
  };

  export type ReceiptStructOutput = [
    bill: bigint,
    tipPercentage: bigint,
    numberOfPeople: bigint,
    customerAccount: string
  ] & {
    bill: bigint;
    tipPercentage: bigint;
    numberOfPeople: bigint;
    customerAccount: string;
  };
}

export interface DinePayInterface extends Interface {
  getFunction(
    nameOrSignature: "getReceiptByWaiter" | "receipts" | "registerReceipt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getReceiptByWaiter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receipts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerReceipt",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReceiptByWaiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receipts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerReceipt",
    data: BytesLike
  ): Result;
}

export interface DinePay extends BaseContract {
  connect(runner?: ContractRunner | null): DinePay;
  waitForDeployment(): Promise<this>;

  interface: DinePayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getReceiptByWaiter: TypedContractMethod<
    [_waiterAccount: AddressLike],
    [DinePay.ReceiptStructOutput],
    "view"
  >;

  receipts: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, string] & {
        bill: bigint;
        tipPercentage: bigint;
        numberOfPeople: bigint;
        customerAccount: string;
      }
    ],
    "view"
  >;

  registerReceipt: TypedContractMethod<
    [
      _waiterAccount: AddressLike,
      _bill: BigNumberish,
      _tipPercentage: BigNumberish,
      _numberOfPeople: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getReceiptByWaiter"
  ): TypedContractMethod<
    [_waiterAccount: AddressLike],
    [DinePay.ReceiptStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "receipts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, string] & {
        bill: bigint;
        tipPercentage: bigint;
        numberOfPeople: bigint;
        customerAccount: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerReceipt"
  ): TypedContractMethod<
    [
      _waiterAccount: AddressLike,
      _bill: BigNumberish,
      _tipPercentage: BigNumberish,
      _numberOfPeople: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
