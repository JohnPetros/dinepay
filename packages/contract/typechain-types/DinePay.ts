/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DinePay {
  export type ReceiptStruct = {
    id: BigNumberish;
    customerAccount: AddressLike;
    waiterAccount: AddressLike;
    totalAmount: BigNumberish;
    tipPercentage: BigNumberish;
    isWithdrawn: boolean;
    createdAt: BigNumberish;
  };

  export type ReceiptStructOutput = [
    id: bigint,
    customerAccount: string,
    waiterAccount: string,
    totalAmount: bigint,
    tipPercentage: bigint,
    isWithdrawn: boolean,
    createdAt: bigint
  ] & {
    id: bigint;
    customerAccount: string;
    waiterAccount: string;
    totalAmount: bigint;
    tipPercentage: bigint;
    isWithdrawn: boolean;
    createdAt: bigint;
  };
}

export interface DinePayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBalance"
      | "getReceipts"
      | "getReceiptsByWaiter"
      | "getWaiterDividend"
      | "payAllWaiters"
      | "payWaiter"
      | "payWaiterReceipt"
      | "registerReceipt"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiptsByWaiter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWaiterDividend",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payAllWaiters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payWaiter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payWaiterReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerReceipt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiptsByWaiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaiterDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payAllWaiters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payWaiter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payWaiterReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface DinePay extends BaseContract {
  connect(runner?: ContractRunner | null): DinePay;
  waitForDeployment(): Promise<this>;

  interface: DinePayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getReceipts: TypedContractMethod<[], [DinePay.ReceiptStructOutput[]], "view">;

  getReceiptsByWaiter: TypedContractMethod<
    [_waiterAccount: AddressLike],
    [DinePay.ReceiptStructOutput[]],
    "view"
  >;

  getWaiterDividend: TypedContractMethod<
    [_waiterAccount: AddressLike],
    [bigint],
    "view"
  >;

  payAllWaiters: TypedContractMethod<[], [void], "payable">;

  payWaiter: TypedContractMethod<
    [_waiterAccount: AddressLike],
    [void],
    "payable"
  >;

  payWaiterReceipt: TypedContractMethod<
    [_receiptId: BigNumberish],
    [void],
    "payable"
  >;

  registerReceipt: TypedContractMethod<
    [_waiterAccount: AddressLike, _tipPercentage: BigNumberish],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReceipts"
  ): TypedContractMethod<[], [DinePay.ReceiptStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getReceiptsByWaiter"
  ): TypedContractMethod<
    [_waiterAccount: AddressLike],
    [DinePay.ReceiptStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWaiterDividend"
  ): TypedContractMethod<[_waiterAccount: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "payAllWaiters"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "payWaiter"
  ): TypedContractMethod<[_waiterAccount: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "payWaiterReceipt"
  ): TypedContractMethod<[_receiptId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "registerReceipt"
  ): TypedContractMethod<
    [_waiterAccount: AddressLike, _tipPercentage: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "payable">;

  filters: {};
}
